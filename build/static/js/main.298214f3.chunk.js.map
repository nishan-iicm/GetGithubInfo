{"version":3,"sources":["asset/octocat.svg","components/banner/banner.style.jsx","components/banner/banner.component.jsx","components/search-box/search-box.style.jsx","components/search-box/search-box.component.jsx","components/card/card.style.jsx","components/card/card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeadingStyle","styled","h1","LogoStyle","img","Banner","src","ReactLogo","alt","DivStyle","div","LabelStyle","label","InputStyle","input","SearchBox","onInputChange","autoComplete","onSubmit","e","preventDefault","htmlFor","id","type","placeholder","name","onChange","MainDiv","AvatarStyle","InfoStyle","Card","profile","avatar_url","href","html_url","target","rel","Email","location","public_repos","bio","App","props","event","setState","searchName","value","getData","state","userName","fetch","then","res","json","data","userData","catch","error","alert","console","log","this","className","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,gkBCEpC,IAAMC,EAAeC,IAAOC,GAAV,KAWZC,EAAYF,IAAOG,IAAV,KCOPC,EAbA,WACb,OACE,kBAAC,WAAD,KACE,gCACE,kBAACL,EAAD,uBAEE,kBAACG,EAAD,CAAWG,IAAKC,IAAWC,IAAI,oB,qmBCXlC,IAAMC,EAAWR,IAAOS,IAAV,KAQRC,EAAaV,IAAOW,MAAV,KAIVC,EAAaZ,IAAOa,MAAV,KCWRC,EAlBG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,kBAAC,WAAD,KACE,0BACEC,aAAa,MACbC,SAAU,SAACC,GACTA,EAAEC,mBAGJ,kBAACX,EAAD,KACE,kBAACE,EAAD,CAAYU,QAAQ,QAApB,eACA,kBAACR,EAAD,CAAYS,GAAG,OAAOC,KAAK,SAASC,YAAY,iBAAiBC,KAAK,OAAOC,SAAUV,Q,4eChB1F,IAAMW,EAAU1B,IAAOS,IAAV,KAQPkB,EAAc3B,IAAOG,IAAV,KAKXyB,EAAY5B,IAAOS,IAAV,KCuBPoB,EA/BF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,kBAACJ,EAAD,KAEE,6BACE,kBAACC,EAAD,CAAatB,IAAKyB,EAAQC,WAAYxB,IAAKuB,EAAQN,QAGrD,kBAACI,EAAD,KAEE,sCAAYE,EAAQN,MAEpB,4CACe,IACb,uBAAGQ,KAAMF,EAAQG,SAAUC,OAAO,SAASC,IAAI,uBAC5CL,EAAQG,WAIb,uCAAaH,EAAQM,OAErB,yCAAeN,EAAQO,UAEvB,8CAAoBP,EAAQQ,cAE5B,qCAAWR,EAAQS,QCiBZC,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAOR1B,cAAgB,SAAC2B,GACf,EAAKC,SAAS,CAAEC,WAAYF,EAAMR,OAAOW,QAAS,WAChD,EAAKC,QAAQ,EAAKC,MAAMH,gBAVT,EAcnBE,QAAU,SAACE,GACTC,MAAM,gCAAD,OAAiCD,IACnCE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKV,SAAS,CAAEW,SAAUD,OACzCE,OAAM,SAACC,GACNC,MAAM,gCACNC,QAAQC,IAAI,yBAA0BH,OAlB1C,EAAKT,MAAQ,CACXH,WAAY,GACZU,SAAU,IAJK,E,qDAyBjB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWvC,cAAe6C,KAAK7C,gBAC9B6C,KAAKb,MAAMO,SAASjC,IAAgC,KAA1BuC,KAAKb,MAAMH,WACpC,kBAAC,EAAD,CAAMd,QAAS8B,KAAKb,MAAMO,WAE1B,yBAAKO,UAAU,WAAf,kBACiB,mC,GAlCTC,aCKEC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLE,QAAQF,MAAMA,EAAMqB,c","file":"static/js/main.298214f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/octocat.d617763f.svg\";","import styled from \"styled-components\";\r\n\r\nexport const HeadingStyle = styled.h1`\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 10px;\r\n  text-transform: uppercase;\r\n  font-size: 4rem;\r\n`;\r\n\r\nexport const LogoStyle = styled.img`\r\n  width: 5rem;\r\n`;\r\n","import React, { Fragment } from \"react\";\r\nimport ReactLogo from \"../../asset/octocat.svg\";\r\n\r\n// Styling\r\nimport { HeadingStyle } from \"./banner.style\";\r\nimport { LogoStyle } from \"./banner.style\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <HeadingStyle>\r\n          Get GitHub Info\r\n          <LogoStyle src={ReactLogo} alt=\"GitHub Logo\" />\r\n        </HeadingStyle>\r\n      </header>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import styled from \"styled-components\";\r\n\r\nexport const DivStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport const LabelStyle = styled.label`\r\n  padding-bottom: 0.3em;\r\n`;\r\n\r\nexport const InputStyle = styled.input`\r\n  border-radius: 20px;\r\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.08), 0 2px 2px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.16), 0 8px 8px rgba(0, 0, 0, 0.2);\r\n  height: 40px;\r\n  width: 200px;\r\n  text-align: center;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n","import React, { Fragment } from \"react\";\r\n\r\n// Styling\r\nimport { DivStyle } from \"./search-box.style\";\r\nimport { LabelStyle } from \"./search-box.style\";\r\nimport { InputStyle } from \"./search-box.style\";\r\n\r\nconst SearchBox = ({ onInputChange }) => {\r\n  return (\r\n    <Fragment>\r\n      <form\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DivStyle>\r\n          <LabelStyle htmlFor=\"user\">Search User</LabelStyle>\r\n          <InputStyle id=\"user\" type=\"search\" placeholder=\"Enter username\" name=\"user\" onChange={onInputChange} />\r\n        </DivStyle>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainDiv = styled.div`\r\n  padding-top: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\n\r\nexport const AvatarStyle = styled.img`\r\n  width: 10em;\r\n  padding-right: 1em;\r\n`;\r\n\r\nexport const InfoStyle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  font-size: 1em;\r\n`;\r\n","import React from \"react\";\r\n\r\n// import Style\r\nimport { MainDiv } from \"./card.style\";\r\nimport { InfoStyle } from \"./card.style\";\r\nimport { AvatarStyle } from \"./card.style\";\r\n\r\nconst Card = ({ profile }) => {\r\n  return (\r\n    <MainDiv>\r\n      {/* Avatar */}\r\n      <div>\r\n        <AvatarStyle src={profile.avatar_url} alt={profile.name} />\r\n      </div>\r\n      {/* Info */}\r\n      <InfoStyle>\r\n        {/* Name */}\r\n        <div>Name: {profile.name}</div>\r\n        {/* Github Link */}\r\n        <div>\r\n          GitHub Link:{\" \"}\r\n          <a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {profile.html_url}\r\n          </a>\r\n        </div>\r\n        {/* email */}\r\n        <div>Email: {profile.Email}</div>\r\n        {/* Location */}\r\n        <div>Location:{profile.location}</div>\r\n        {/* Public repo */}\r\n        <div>Public repos: {profile.public_repos}</div>\r\n        {/* Info */}\r\n        <div>Bio: {profile.bio}</div>\r\n      </InfoStyle>\r\n    </MainDiv>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment, Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Banner from \"./components/banner/banner.component\";\r\nimport SearchBox from \"./components/search-box/search-box.component\";\r\nimport Card from \"./components/card/card.component\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchName: \"\",\r\n      userData: \"\",\r\n    };\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ searchName: event.target.value }, () => {\r\n      this.getData(this.state.searchName);\r\n    });\r\n  };\r\n\r\n  getData = (userName) => {\r\n    fetch(`https://api.github.com/users/${userName}`)\r\n      .then((res) => res.json())\r\n      .then((data) => this.setState({ userData: data }))\r\n      .catch((error) => {\r\n        alert(\"Oops! Could not reach GitHub\");\r\n        console.log(\"Oops! We have an error\", error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Banner />\r\n        <SearchBox onInputChange={this.onInputChange} />\r\n        {this.state.userData.id && this.state.searchName !== \"\" ? (\r\n          <Card profile={this.state.userData} />\r\n        ) : (\r\n          <div className=\"no-data\">\r\n            No user Found! <br />\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}